generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NEXTAUTHJS
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// INTERNAL MODELS
model User {
  id            String     @id @default(cuid())
  email         String?    @unique
  emailVerified DateTime? // <-- Required by NextAuth Prisma Adapter
  name          String?
  image         String?
  passwordHash  String?
  role          String     @default("USER") // e.g., "USER", "ADMIN"
  bio           String?
  projects      Project[]
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Project {
  id           String     @id @default(cuid())
  name         String
  description  String?
  isPublic     Boolean    @default(false)
  passwordHash String? // Hashed password for private projects
  owner        User       @relation(fields: [ownerId], references: [id])
  ownerId      String
  messages     Message[]
  nodes        Node[]
  edges        Edge[]
  summaries    Summary[]
  documents    Document[]
  chats        Chat[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Chat {
  id        String    @id @default(cuid())
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  title     String
  createdAt DateTime  @default(now())
  messages  Message[]
}

model Message {
  id        String        @id @default(cuid())
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  chat      Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
  author    MessageAuthor
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum MessageAuthor {
  user
  ai
}

model Node {
  id         String    @id @default(cuid())
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  label      String
  type       String
  metadata   Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  document   Document? @relation(fields: [documentId], references: [id])
  documentId String?
  provenance String? // e.g., source document, extraction method, etc.
}

model Edge {
  id         String    @id @default(cuid())
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  source     String // Node id
  target     String // Node id
  type       String
  metadata   Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  document   Document? @relation(fields: [documentId], references: [id])
  documentId String?
  provenance String? // e.g., source document, extraction method, etc.
}

model Summary {
  id         String    @id @default(cuid())
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  text       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  document   Document? @relation(fields: [documentId], references: [id])
  documentId String?
  provenance String? // e.g., source document, extraction method, etc.
}

model Document {
  id            String    @id @default(cuid())
  project       Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  title         String
  type          String // e.g., 'pdf', 'web', 'text', etc.
  url           String? // For web/PDF sources
  content       String? // Raw text content
  extractedText String? // Extracted text from PDF or other sources for AI/graph
  metadata      Json?
  nodes         Node[]
  edges         Edge[]
  summaries     Summary[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
