generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NEXTAUTHJS
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// INTERNAL MODELS
model User {
  id             String     @id @default(cuid())
  authProviderId String     @unique // e.g., NextAuth.js user.id or OAuth sub
  email          String     @unique
  name           String?
  image          String?
  role           String     @default("USER") // e.g., "USER", "ADMIN"
  bio            String?
  passwordHash   String? // Hashed password for credentials (email/password) users
  projects       Project[]
  accounts       Account[]
  sessions       Session[]
  documents      Document[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Project {
  id           String               @id @default(cuid())
  name         String
  description  String?
  isPublic     Boolean              @default(false)
  passwordHash String? // Hashed password for private projects
  owner        User                 @relation(fields: [ownerId], references: [id])
  ownerId      String
  queries      ResearchQuery[]
  nodes        KnowledgeGraphNode[]
  edges        KnowledgeGraphEdge[]
  summaries    SummaryPoint[]
  documents    Document[]
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

model ResearchQuery {
  id        String   @id @default(cuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  queryText String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nodes     KnowledgeGraphNode[]
  edges     KnowledgeGraphEdge[]
  summaries SummaryPoint[]
}

model KnowledgeGraphNode {
  id              String         @id @default(cuid())
  project         Project        @relation(fields: [projectId], references: [id])
  projectId       String
  label           String
  type            String
  metadata        Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  researchQuery   ResearchQuery? @relation(fields: [researchQueryId], references: [id])
  researchQueryId String?
  provenance      String? // e.g., source document, extraction method, etc.
}

model KnowledgeGraphEdge {
  id              String         @id @default(cuid())
  project         Project        @relation(fields: [projectId], references: [id])
  projectId       String
  source          String // Node id
  target          String // Node id
  type            String
  metadata        Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  researchQuery   ResearchQuery? @relation(fields: [researchQueryId], references: [id])
  researchQueryId String?
  provenance      String? // e.g., source document, extraction method, etc.
}

model SummaryPoint {
  id              String         @id @default(cuid())
  project         Project        @relation(fields: [projectId], references: [id])
  projectId       String
  text            String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  researchQuery   ResearchQuery? @relation(fields: [researchQueryId], references: [id])
  researchQueryId String?
  provenance      String? // e.g., source document, extraction method, etc.
}

model Document {
  id        String   @id @default(cuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  type      String // e.g., 'pdf', 'web', 'text', etc.
  url       String? // For web/PDF sources
  content   String? // Raw text content
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
